<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.internal.quote.mapper.QuoteOpportunitiesMapper">

    <resultMap type="com.internal.quote.vo.QuoteOpportunitiesVO" id="QuoteOpportunitiesVO">
        <result property="id"    column="id"    />
        <result property="opportunitiesParentId"    column="opportunities_parent_id"    />
        <result property="name"    column="name"    />
        <result property="type"    column="type"    />
        <result property="category"    column="category"    />
        <result property="saleId"    column="sale_id"    />
        <result property="saleName"    column="sale_name"    />
        <result property="customersName"    column="customers_name"    />
        <result property="appendix"    column="appendix"    />
        <result property="introduce"    column="introduce"    />
        <result property="quoteDesc"    column="quote_desc"    />
        <result property="reasonDesc"    column="reason_desc"    />
        <result property="loseTime"    column="lose_time"    />
        <result property="trialQuoteDesc"    column="trial_quote_desc"    />
        <result property="amount"    column="amount"    />

        <result property="status"    column="status"    />
        <result property="isExistDraft"    column="isExistDraft"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
        <result property="saleAuditTime"    column="sale_audit_time"    />
        <result property="signAuditTime"    column="sign_audit_time"    />
        <result property="saleAuditLog"    column="sale_audit_log"    />
        <result property="signAuditLog"    column="sign_audit_log"    />
        <result property="quoteContent"    column="quoteContent"    />
        <result property="remark"    column="remark"    />

        <result property="supportCrmId"    column="support_crm_id"    />
        <result property="supportType"    column="support_type"    />
        <result property="supportPerson"    column="support_person"    />
        <result property="preSaleName"    column="preSaleName"    />
        <result property="processCategory"    column="process_category"    />
        <result property="quoteMethod"    column="quote_method"    />
        <result property="quoters"    column="quoters"    />
        <result property="nonQuoters"    column="non_quoters"    />
        <result property="parentStatus"    column="parent_status"    />
    </resultMap>

    <sql id="whereConditions">
        <where>
            1=1
            <if test="name != null  and name != ''">and qop.name like concat('%', #{name}, '%')</if>
            <if test="saleAuditLog != null  and saleAuditLog != ''">and qo.sale_audit_log like concat('%', #{saleAuditLog}, '%')</if>
            <if test="signAuditLog != null  and signAuditLog != ''">and qo.sign_audit_log like concat('%', #{signAuditLog}, '%')</if>
            <if test="typeList != null and typeList.size() > 0">
                and qo.`type` in
                <foreach collection="typeList" item="type" open="(" separator="," close=")">
                    #{type}
                </foreach>
            </if>
            <if test="statusList != null and statusList.size() > 0">
                and qo.`status` in
                <foreach collection="statusList" item="status" open="(" separator="," close=")">
                    #{status}
                </foreach>
            </if>
            <if test="parentStatusList != null and parentStatusList.size() > 0">
                and qop.`status` in
                <foreach collection="parentStatusList" item="parentStatus" open="(" separator="," close=")">
                    #{parentStatus}
                </foreach>
            </if>
            <if test="query != null and query != ''">and (
                qop.name like concat('%', #{query}, '%')
                or qop.customers_name like concat('%', #{query}, '%')
                or qop.sale_name like concat('%', #{query}, '%')
                or qop.category like concat('%', #{query}, '%')
                or qo.support_name like concat('%', #{query}, '%')
                )
            </if>
            <if test="quoteMethod != null  and quoteMethod != ''">and qo.quote_method like concat('%', #{quoteMethod}, '%')</if>
            <if test="supportPerson != null and supportPerson.size > 0">
                and (
                <foreach collection="supportPerson" item="item" separator=" or ">
                    FIND_IN_SET(#{item}, qo.support_person)
                </foreach>
                )
            </if>
            <if test="salePerson != null and salePerson.size > 0">
                and qop.sale_id in
                <foreach collection="salePerson" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            /* auth 如果为真则数据过滤*/
            <if test="auth">
                <!-- 数据范围过滤 -->
                ${params.dataScope}
            </if>
        </where>
    </sql>

    <select id="selectQuoteOpportunitiesList" parameterType="com.internal.quote.dto.QuoteOpportunitiesQuery" resultMap="QuoteOpportunitiesVO">
        SELECT
        qo.id,
        qo.opportunities_parent_id,
        qop.name,
        qo.type,
        qop.category,
        qop.sale_id,
        qop.sale_name,
        qop.customers_name,
        qo.appendix ,
        qop.introduce,
        qo.reason_desc,
        qo.lose_time,
        qo.trial_quote_desc,
        qo.amount,
        qo.status,
        qo.create_by,
        qo.create_time,
        qo.update_by,
        qo.update_time,
        qo.sale_audit_time,
        qo.sign_audit_time,
        qo.sale_audit_log,
        qo.sign_audit_log,
        CASE
        WHEN EXISTS (
        SELECT 1
        FROM quote_opportunities_detail qod
        WHERE qod.opportunities_id = qo.id AND qod.status = 0
        ) THEN true
        ELSE false
        END AS isExistDraft,
        qo.support_identification as quoteContent,
        qo.support_crm_id,
        qo.support_person,
        qo.support_name as preSaleName,
        qo.support_type,
        qo.process_category,
        qo.quote_method,
        qo.quoters,
        qo.non_quoters,
        qop.status as parent_status
        FROM
        quote_opportunities qo
        join quote_opportunities_parent qop on qo.opportunities_parent_id = qop.id
        <include refid="whereConditions"/>
    </select>
    <select id="selectQuoteOpportunitiesCount" parameterType="com.internal.quote.dto.QuoteOpportunitiesQuery" resultType="java.lang.Long">
        SELECT count(qo.id)
        FROM
        quote_opportunities qo
        join quote_opportunities_parent qop on qo.opportunities_parent_id = qop.id
        <include refid="whereConditions"/>
    </select>
    <select id="selectQuoteSalePhone" resultType="java.lang.String">
        select
            u.phonenumber
        from quote_opportunities qo
        left join quote_opportunities_parent qop on qo.opportunities_parent_id = qop.id
        left join sys_user u on qop.sale_id = u.user_id
        where qo.id = #{opportunitiesId}
    </select>

    <delete id="deleteQuoteOpportunitiesById" parameterType="Long">
        delete
        from quote_opportunities
        where id = #{id}
    </delete>

    <delete id="deleteQuoteOpportunitiesByIds" parameterType="String">
        delete from quote_opportunities where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>